/// <reference types="lazy-linq-with-types" />
import { DbServer } from "./isotropy-db";
export declare type Diff<T extends string, U extends string> = ({
    [P in T]: P;
} & {
    [P in U]: never;
} & {
    [x: string]: never;
})[T];
export declare type Omit<T, K extends keyof T> = {
    [P in Diff<keyof T, K>]: T[P];
};
export declare type RowBase = {
    __id: string;
};
export default class Db<T> {
    state: string;
    server: DbServer<T>;
    pkeySequences: {
        [key: string]: number;
    };
    tables: T;
    rollback?: T;
    constructor(server: DbServer<T>, tables: T);
    __data(): T;
    beginTransaction(): Promise<void>;
    close(): Promise<void>;
    commitTransaction(): Promise<void>;
    delete<TRow extends RowBase>(tableSelector: ((tables: T) => IEnumerable<TRow>), selector: Predicate<TRow>): Promise<void>;
    rollbackTransaction(): Promise<void>;
    dropTable<TRow extends RowBase>(tableSelector: ((tables: T) => IEnumerable<TRow>)): Promise<void>;
    insert<TRow extends RowBase>(tableSelector: ((tables: T) => IEnumerable<TRow>), item: Omit<TRow, "__id">): Promise<number>;
    insertMany<TRow extends RowBase>(tableSelector: ((tables: T) => IEnumerable<TRow>), rows: Omit<TRow, "__id">[]): Promise<any>;
    update<TRow>(tableSelector: ((tables: T) => IEnumerable<TRow>), selector: Predicate<TRow>, props: Partial<TRow>): Promise<void>;
    open(): Promise<void>;
    __getTableName<TRow extends RowBase>(table: IEnumerable<TRow>): string | never;
    __updateNextId<TRow extends RowBase>(table: IEnumerable<TRow>): number;
}
